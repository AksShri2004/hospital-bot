// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A symptom analysis AI agent.
 *
 * - analyzeSymptoms - A function that handles the symptom analysis process.
 * - AnalyzeSymptomsInput - The input type for the analyzeSymptoms function.
 * - AnalyzeSymptomsOutput - The return type for the analyzeSymptoms function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeSymptomsInputSchema = z.object({
  symptoms: z
    .string()
    .describe('The symptoms that the user is experiencing.'),
  medicalRecords: z
    .string()
    .describe('The past medical records of the user.'),
});
export type AnalyzeSymptomsInput = z.infer<typeof AnalyzeSymptomsInputSchema>;

const AnalyzeSymptomsOutputSchema = z.object({
  relevantDoctorSpecializations: z.array(
    z.string().describe('A relevant doctor specialization.')
  ).describe('A list of relevant doctor specializations based on the symptoms and medical history.'),
});
export type AnalyzeSymptomsOutput = z.infer<typeof AnalyzeSymptomsOutputSchema>;

export async function analyzeSymptoms(input: AnalyzeSymptomsInput): Promise<AnalyzeSymptomsOutput> {
  return analyzeSymptomsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeSymptomsPrompt',
  input: {schema: AnalyzeSymptomsInputSchema},
  output: {schema: AnalyzeSymptomsOutputSchema},
  prompt: `You are an AI assistant that analyzes a user's symptoms and medical records to provide a list of relevant doctor specializations.

  Symptoms: {{{symptoms}}}
  Medical Records: {{{medicalRecords}}}

  Based on the symptoms and medical records, provide a list of relevant doctor specializations.
  Ensure that the specializations are specific and actionable.
  The specializations should be in the format of a list, with each specialization on a new line.
  Do not include any additional information or explanations.
  Just return the array of specialization names.`,
});

const analyzeSymptomsFlow = ai.defineFlow(
  {
    name: 'analyzeSymptomsFlow',
    inputSchema: AnalyzeSymptomsInputSchema,
    outputSchema: AnalyzeSymptomsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
